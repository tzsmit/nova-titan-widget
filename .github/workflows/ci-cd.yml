name: Nova Titan Widget CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: 18
  PYTHON_VERSION: 3.11

jobs:
  # Test Jobs
  test-shared:
    name: Test Shared Package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci
          cd shared && npm ci
      
      - name: Build shared package
        run: cd shared && npm run build
      
      - name: Run shared tests
        run: cd shared && npm test

  test-backend:
    name: Test Backend API
    runs-on: ubuntu-latest
    needs: test-shared
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci
      
      - name: Build shared package
        run: cd shared && npm run build
      
      - name: Run backend tests
        run: cd backend && npm test
        env:
          NODE_ENV: test
          DATABASE_URL: sqlite::memory:
          REDIS_URL: redis://localhost:6379
          
      - name: Run integration tests
        run: cd backend && npm run test:integration
        env:
          NODE_ENV: test

  test-ml:
    name: Test ML Service
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install Python dependencies
        run: |
          cd ml
          pip install -r requirements.txt
          pip install pytest pytest-asyncio
      
      - name: Run ML tests
        run: cd ml && python -m pytest
        env:
          ENVIRONMENT: test

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    needs: test-shared
    
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci
          cd frontend && npm ci
      
      - name: Build shared package
        run: cd shared && npm run build
      
      - name: Run frontend tests
        run: cd frontend && npm test
        env:
          CI: true
          
      - name: Build frontend
        run: cd frontend && npm run build
        env:
          VITE_API_URL: https://api.nova-titan.com
          VITE_ENVIRONMENT: production

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run npm audit
        run: npm audit --audit-level=high
        
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Build and Deploy Jobs
  build-and-deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest
    needs: [test-shared, test-backend, test-ml, test-frontend, security-scan]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      # Build all packages
      - name: Install dependencies
        run: npm ci
      
      - name: Build packages
        run: npm run build
        env:
          VITE_API_URL: ${{ secrets.PRODUCTION_API_URL }}
          VITE_SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          VITE_GA_TRACKING_ID: ${{ secrets.GA_TRACKING_ID }}
      
      # Deploy Frontend to Vercel
      - name: Deploy Frontend to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./frontend
          vercel-args: '--prod'
        if: github.event_name == 'release'
      
      # Build and push Docker images
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            novatitan/backend
            novatitan/ml-service
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix=git-
      
      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: novatitan/backend:${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push ML Service image
        uses: docker/build-push-action@v5
        with:
          context: ./ml
          push: true
          tags: novatitan/ml-service:${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to staging/production
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
      - name: Deploy to Render (Staging)
        run: |
          curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK_STAGING }}"
          echo "Deployed to staging environment"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: github.event_name == 'release'
    environment: production
    
    steps:
      - name: Deploy to Render (Production)
        run: |
          curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK_PRODUCTION }}"
          echo "Deployed to production environment"
      
      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  # Performance Tests
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v9
        with:
          configPath: '.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Notification
  notify-completion:
    name: Notify Completion
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, performance-test]
    if: always()
    
    steps:
      - name: Notify team
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ needs.deploy-production.result || needs.deploy-staging.result }}
          channel: '#nova-titan-ci'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        if: always()