name: Nova Titan Widget CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: 18
  PYTHON_VERSION: 3.11

jobs:
  test-shared:
    name: Test Shared Package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci
          cd shared && npm ci
      
      - name: Build shared package
        run: cd shared && npm run build
      
      - name: Run shared tests
        run: cd shared && npm test

  test-backend:
    name: Test Backend API
    runs-on: ubuntu-latest
    needs: test-shared
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci
      
      - name: Build shared package
        run: cd shared && npm run build
      
      - name: Run backend tests
        run: cd backend && npm test
        env:
          NODE_ENV: test
          DATABASE_URL: "sqlite::memory:"
          REDIS_URL: redis://localhost:6379
          
      - name: Run integration tests
        run: cd backend && npm run test:integration
        env:
          NODE_ENV: test

  test-ml:
    name: Test ML Service
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install Python dependencies
        run: |
          cd ml
          pip install -r requirements.txt
          pip install pytest pytest-asyncio
      
      - name: Run ML tests
        run: cd ml && python -m pytest
        env:
          ENVIRONMENT: test

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    needs: test-shared
    
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci
          cd frontend && npm ci
      
      - name: Build shared package
        run: cd shared && npm run build
      
      - name: Run frontend tests
        run: cd frontend && npm test
        env:
          CI: true
          
      - name: Build frontend
        run: cd frontend && npm run build
        env:
          VITE_API_URL: https://api.nova-titan.com
          VITE_ENVIRONMENT: production

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run npm audit
        run: npm audit --audit-level=high
        continue-on-error: true

  build-and-deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest
    needs: [test-shared, test-backend, test-ml, test-frontend, security-scan]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build packages
        run: npm run build

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
      - name: Deploy to Render (Staging)
        run: |
          echo "Staging deployment would run here"
          echo "Configure RENDER_DEPLOY_HOOK_STAGING secret to enable"
        continue-on-error: true

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: github.event_name == 'release'
    environment: production
    
    steps:
      - name: Deploy to Render (Production)
        run: |
          echo "Production deployment would run here"
          echo "Configure RENDER_DEPLOY_HOOK_PRODUCTION secret to enable"
        continue-on-error: true

  notify-completion:
    name: Notify Completion
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Notify team
        run: |
          echo "Build and deployment completed"
          echo "Configure SLACK_WEBHOOK secret to enable Slack notifications"